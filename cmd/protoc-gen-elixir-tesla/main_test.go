package main

import (
	"bytes"
	"io"
	"os"
	"os/exec"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/pluginpb"
)

func TestVersion(t *testing.T) {
	t.Parallel()
	stdout, stderr, exitCode := testRunProtocGenElixirTesla(t, nil, "--version")
	assert.Equal(t, "", stderr.String())
	assert.Equal(t, 0, exitCode)
	assert.Contains(t, stdout.String(), "protoc-gen-elixir-tesla v1.0.0")
}

func TestGenerate(t *testing.T) {
	t.Parallel()

	compilerVersion := &pluginpb.Version{
		Major:  ptr(int32(0)),
		Minor:  ptr(int32(0)),
		Patch:  ptr(int32(1)),
		Suffix: ptr("test"),
	}

	t.Run("basic generation", func(t *testing.T) {
		t.Parallel()

		t.Run("with unary and streaming methods", func(t *testing.T) {
			fileDesc := &descriptorpb.FileDescriptorProto{
				Name:    ptr("test.proto"),
				Package: ptr("test.v1"),
				MessageType: []*descriptorpb.DescriptorProto{
					{Name: ptr("Request")},
					{Name: ptr("Response")},
				},
				Service: []*descriptorpb.ServiceDescriptorProto{
					{
						Name: ptr("TestService"),
						Method: []*descriptorpb.MethodDescriptorProto{
							{
								Name:       ptr("UnaryMethod"),
								InputType:  ptr(".test.v1.Request"),
								OutputType: ptr(".test.v1.Response"),
							},
							{
								Name:            ptr("CreateUser"),
								InputType:       ptr(".test.v1.Request"),
								OutputType:      ptr(".test.v1.Response"),
							},
						},
					},
				},
				Options: &descriptorpb.FileOptions{
					GoPackage: ptr("example.com/test/gen"),
				},
			}

			req := &pluginpb.CodeGeneratorRequest{
				FileToGenerate:        []string{"test.proto"},
				ProtoFile:             []*descriptorpb.FileDescriptorProto{fileDesc},
				SourceFileDescriptors: []*descriptorpb.FileDescriptorProto{fileDesc},
				CompilerVersion:       compilerVersion,
			}

			rsp := testGenerate(t, req)
			assert.Nil(t, rsp.Error)
			assert.Equal(t, 1, len(rsp.File))

			file := rsp.File[0]
			assert.Equal(t, "test_service_client.ex", file.GetName())

			content := file.GetContent()

			expectedContent := `# Code generated by protoc-gen-elixir-tesla. DO NOT EDIT.
#
# Source: test.proto

defmodule TestServiceClient do
  @moduledoc """
  Tesla client for TestService service.
  """

  def unary_method(client, %Request{} = req, opts \\ []) do
    url = "/test.v1.TestService/UnaryMethod"
    body = Protobuf.encode(req)
    Tesla.post(client, url, body, opts)
  end

  def create_user(client, %Request{} = req, opts \\ []) do
    url = "/test.v1.TestService/CreateUser"
    body = Protobuf.encode(req)
    Tesla.post(client, url, body, opts)
  end

end`
			assert.Equal(t, expectedContent, content)
		})

	})

	t.Run("no service", func(t *testing.T) {
		t.Parallel()

		fileDesc := &descriptorpb.FileDescriptorProto{
			Name:    ptr("no_service.proto"),
			Package: ptr("test.v1"),
			MessageType: []*descriptorpb.DescriptorProto{
				{Name: ptr("Request")},
				{Name: ptr("Response")},
			},
			Options: &descriptorpb.FileOptions{
				GoPackage: ptr("example.com/test/gen"),
			},
		}

		req := &pluginpb.CodeGeneratorRequest{
			FileToGenerate:        []string{"no_service.proto"},
			ProtoFile:             []*descriptorpb.FileDescriptorProto{fileDesc},
			SourceFileDescriptors: []*descriptorpb.FileDescriptorProto{fileDesc},
			CompilerVersion:       compilerVersion,
		}
		rsp := testGenerate(t, req)
		assert.Nil(t, rsp.Error)
		assert.Equal(t, 0, len(rsp.File))
	})
}

func TestGeneratedCodeStructure(t *testing.T) {
	t.Parallel()

	t.Run("two services with same method name", func(t *testing.T) {
		t.Parallel()

		fileDesc := &descriptorpb.FileDescriptorProto{
			Name:    ptr("multi_service.proto"),
			Package: ptr("test.v1"),
			MessageType: []*descriptorpb.DescriptorProto{
				{Name: ptr("UserRequest")},
				{Name: ptr("UserResponse")},
				{Name: ptr("ProductRequest")},
				{Name: ptr("ProductResponse")},
			},
			Service: []*descriptorpb.ServiceDescriptorProto{
				{
					Name: ptr("UserService"),
					Method: []*descriptorpb.MethodDescriptorProto{
						{
							Name:       ptr("Create"),
							InputType:  ptr(".test.v1.UserRequest"),
							OutputType: ptr(".test.v1.UserResponse"),
						},
					},
				},
				{
					Name: ptr("ProductService"),
					Method: []*descriptorpb.MethodDescriptorProto{
						{
							Name:       ptr("Create"),
							InputType:  ptr(".test.v1.ProductRequest"),
							OutputType: ptr(".test.v1.ProductResponse"),
						},
					},
				},
			},
			Options: &descriptorpb.FileOptions{
				GoPackage: ptr("example.com/test/gen"),
			},
		}

		compilerVersion := &pluginpb.Version{
			Major:  ptr(int32(0)),
			Minor:  ptr(int32(0)),
			Patch:  ptr(int32(1)),
			Suffix: ptr("test"),
		}

		req := &pluginpb.CodeGeneratorRequest{
			FileToGenerate:        []string{"multi_service.proto"},
			ProtoFile:             []*descriptorpb.FileDescriptorProto{fileDesc},
			SourceFileDescriptors: []*descriptorpb.FileDescriptorProto{fileDesc},
			CompilerVersion:       compilerVersion,
		}

		rsp := testGenerate(t, req)
		assert.Nil(t, rsp.Error)
		assert.Equal(t, 2, len(rsp.File)) // Should generate 2 files, one per service

		// Check UserService file
		userServiceFile := findFileByName(rsp.File, "user_service_client.ex")
		require.NotNil(t, userServiceFile)
		userContent := userServiceFile.GetContent()

		expectedUserContent := `# Code generated by protoc-gen-elixir-tesla. DO NOT EDIT.
#
# Source: multi_service.proto

defmodule UserServiceClient do
  @moduledoc """
  Tesla client for UserService service.
  """

  def create(client, %UserRequest{} = req, opts \\ []) do
    url = "/test.v1.UserService/Create"
    body = Protobuf.encode(req)
    Tesla.post(client, url, body, opts)
  end

end`
		assert.Equal(t, expectedUserContent, userContent)

		// Check ProductService file
		productServiceFile := findFileByName(rsp.File, "product_service_client.ex")
		require.NotNil(t, productServiceFile)
		productContent := productServiceFile.GetContent()

		expectedProductContent := `# Code generated by protoc-gen-elixir-tesla. DO NOT EDIT.
#
# Source: multi_service.proto

defmodule ProductServiceClient do
  @moduledoc """
  Tesla client for ProductService service.
  """

  def create(client, %ProductRequest{} = req, opts \\ []) do
    url = "/test.v1.ProductService/Create"
    body = Protobuf.encode(req)
    Tesla.post(client, url, body, opts)
  end

end`
		assert.Equal(t, expectedProductContent, productContent)
	})
}

func TestElixirNamingConventions(t *testing.T) {
	t.Parallel()

	compilerVersion := &pluginpb.Version{
		Major:  ptr(int32(0)),
		Minor:  ptr(int32(0)),
		Patch:  ptr(int32(1)),
		Suffix: ptr("test"),
	}

	t.Run("camelCase to snake_case conversion", func(t *testing.T) {
		t.Parallel()

		fileDesc := &descriptorpb.FileDescriptorProto{
			Name:    ptr("billing/v1/invoice.proto"),
			Package: ptr("acme.billing.v1"),
			MessageType: []*descriptorpb.DescriptorProto{
				{Name: ptr("CreateInvoiceRequest")},
				{Name: ptr("CreateInvoiceResponse")},
			},
			Service: []*descriptorpb.ServiceDescriptorProto{
				{
					Name: ptr("BillingService"),
					Method: []*descriptorpb.MethodDescriptorProto{
						{
							Name:       ptr("CreateInvoice"),
							InputType:  ptr(".acme.billing.v1.CreateInvoiceRequest"),
							OutputType: ptr(".acme.billing.v1.CreateInvoiceResponse"),
						},
					},
				},
			},
			Options: &descriptorpb.FileOptions{
				GoPackage: ptr("github.com/acme/service/gen"),
			},
		}

		req := &pluginpb.CodeGeneratorRequest{
			FileToGenerate:        []string{"billing/v1/invoice.proto"},
			ProtoFile:             []*descriptorpb.FileDescriptorProto{fileDesc},
			SourceFileDescriptors: []*descriptorpb.FileDescriptorProto{fileDesc},
			CompilerVersion:       compilerVersion,
		}

		rsp := testGenerate(t, req)
		assert.Nil(t, rsp.Error)
		assert.Equal(t, 1, len(rsp.File))

		file := rsp.File[0]
		expectedPath := "billing_service_client.ex"
		assert.Equal(t, expectedPath, file.GetName())

		content := file.GetContent()
		assert.Contains(t, content, "defmodule BillingServiceClient do")
		assert.Contains(t, content, "def create_invoice(client, %CreateInvoiceRequest{} = req, opts \\\\ []) do")
		assert.Contains(t, content, "url = \"/acme.billing.v1.BillingService/CreateInvoice\"")
	})
}

func testGenerate(t *testing.T, req *pluginpb.CodeGeneratorRequest) *pluginpb.CodeGeneratorResponse {
	t.Helper()

	inputBytes, err := proto.Marshal(req)
	require.NoError(t, err)

	stdout, stderr, exitCode := testRunProtocGenElixirTesla(t, bytes.NewReader(inputBytes))
	assert.Equal(t, 0, exitCode)
	assert.Equal(t, "", stderr.String())
	assert.Greater(t, len(stdout.Bytes()), 0)

	var output pluginpb.CodeGeneratorResponse
	assert.NoError(t, proto.Unmarshal(stdout.Bytes(), &output))
	return &output
}

func testRunProtocGenElixirTesla(t *testing.T, stdin io.Reader, args ...string) (stdout, stderr *bytes.Buffer, exitCode int) {
	t.Helper()

	stdout = &bytes.Buffer{}
	stderr = &bytes.Buffer{}
	args = append([]string{"run", "main.go"}, args...)

	cmd := exec.Command("go", args...)
	cmd.Env = os.Environ()
	cmd.Stdin = stdin
	cmd.Stdout = stdout
	cmd.Stderr = stderr
	require.NoError(t, cmd.Run(), "Run go %v", args)
	exitCode = cmd.ProcessState.ExitCode()
	return stdout, stderr, exitCode
}

func findFileByName(files []*pluginpb.CodeGeneratorResponse_File, name string) *pluginpb.CodeGeneratorResponse_File {
	for _, file := range files {
		if file.GetName() == name {
			return file
		}
	}
	return nil
}

func ptr[T any](v T) *T {
	return &v
}
