package main

import (
	"bytes"
	"io"
	"os"
	"os/exec"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/pluginpb"
)

func TestVersion(t *testing.T) {
	t.Parallel()
	stdout, stderr, exitCode := testRunProtocGenServiceStruct(t, nil, "--version")
	assert.Equal(t, "", stderr.String())
	assert.Equal(t, 0, exitCode)
	assert.NotEmpty(t, stdout.String())
}

func TestGenerate(t *testing.T) {
	t.Parallel()

	compilerVersion := &pluginpb.Version{
		Major:  ptr(int32(0)),
		Minor:  ptr(int32(0)),
		Patch:  ptr(int32(1)),
		Suffix: ptr("test"),
	}

	t.Run("basic generation", func(t *testing.T) {
		t.Parallel()

		t.Run("with unary and streaming methods", func(t *testing.T) {
			fileDesc := &descriptorpb.FileDescriptorProto{
				Name:    ptr("test.proto"),
				Package: ptr("test.v1"),
				MessageType: []*descriptorpb.DescriptorProto{
					{Name: ptr("Request")},
					{Name: ptr("Response")},
				},
				Service: []*descriptorpb.ServiceDescriptorProto{
					{
						Name: ptr("TestService"),
						Method: []*descriptorpb.MethodDescriptorProto{
							{
								Name:       ptr("UnaryMethod"),
								InputType:  ptr(".test.v1.Request"),
								OutputType: ptr(".test.v1.Response"),
							},
							{
								Name:            ptr("ClientStream"),
								InputType:       ptr(".test.v1.Request"),
								OutputType:      ptr(".test.v1.Response"),
								ClientStreaming: ptr(true),
								ServerStreaming: ptr(false),
							},
							{
								Name:            ptr("ServerStream"),
								InputType:       ptr(".test.v1.Request"),
								OutputType:      ptr(".test.v1.Response"),
								ClientStreaming: ptr(false),
								ServerStreaming: ptr(true),
							},
							{
								Name:            ptr("BidiStream"),
								InputType:       ptr(".test.v1.Request"),
								OutputType:      ptr(".test.v1.Response"),
								ClientStreaming: ptr(true),
								ServerStreaming: ptr(true),
							},
						},
					},
				},
				Options: &descriptorpb.FileOptions{
					GoPackage: ptr("example.com/test/gen"),
				},
			}

			req := &pluginpb.CodeGeneratorRequest{
				FileToGenerate:        []string{"test.proto"},
				ProtoFile:             []*descriptorpb.FileDescriptorProto{fileDesc},
				SourceFileDescriptors: []*descriptorpb.FileDescriptorProto{fileDesc},
				CompilerVersion:       compilerVersion,
			}

			rsp := testGenerate(t, req)
			assert.Nil(t, rsp.Error)
			assert.Equal(t, 1, len(rsp.File))

			file := rsp.File[0]
			assert.Contains(t, file.GetName(), "example.com/test/gen/genconnect/test.servicestruct.connect.go")
			assert.Equal(t, "example.com/test/gen/genconnect/test.servicestruct.connect.go", file.GetName())

			content := file.GetContent()

			assert.Equal(t, `// Code generated by protoc-gen-connect-go-servicestruct. DO NOT EDIT.
//
// Source: test.proto

package genconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	gen "example.com/test/gen"
)

type TestServiceUnaryMethodHandlerFunc func(context.Context, *connect.Request[gen.Request]) (*connect.Response[gen.Response], error)

type TestServiceClientStreamHandlerFunc func(context.Context, *connect.ClientStream[gen.Request]) (*connect.Response[gen.Response], error)

type TestServiceServerStreamHandlerFunc func(context.Context, *connect.Request[gen.Request], *connect.ServerStream[gen.Response]) error

type TestServiceBidiStreamHandlerFunc func(context.Context, *connect.BidiStream[gen.Request, gen.Response]) error

type TestServiceStruct struct {
	UnaryMethodFunc  TestServiceUnaryMethodHandlerFunc
	ClientStreamFunc TestServiceClientStreamHandlerFunc
	ServerStreamFunc TestServiceServerStreamHandlerFunc
	BidiStreamFunc   TestServiceBidiStreamHandlerFunc
}

func (s *TestServiceStruct) UnaryMethod(ctx context.Context, req *connect.Request[gen.Request]) (*connect.Response[gen.Response], error) {
	return s.UnaryMethodFunc(ctx, req)
}

func (s *TestServiceStruct) ClientStream(ctx context.Context, stream *connect.ClientStream[gen.Request]) (*connect.Response[gen.Response], error) {
	return s.ClientStreamFunc(ctx, stream)
}

func (s *TestServiceStruct) ServerStream(ctx context.Context, req *connect.Request[gen.Request], stream *connect.ServerStream[gen.Response]) error {
	return s.ServerStreamFunc(ctx, req, stream)
}

func (s *TestServiceStruct) BidiStream(ctx context.Context, stream *connect.BidiStream[gen.Request, gen.Response]) error {
	return s.BidiStreamFunc(ctx, stream)
}
`, content)
		})

	})

	t.Run("no service", func(t *testing.T) {
		t.Parallel()

		fileDesc := &descriptorpb.FileDescriptorProto{
			Name:    ptr("no_service.proto"),
			Package: ptr("test.v1"),
			MessageType: []*descriptorpb.DescriptorProto{
				{Name: ptr("Request")},
				{Name: ptr("Response")},
			},
			Options: &descriptorpb.FileOptions{
				GoPackage: ptr("example.com/test/gen"),
			},
		}

		req := &pluginpb.CodeGeneratorRequest{
			FileToGenerate:        []string{"no_service.proto"},
			ProtoFile:             []*descriptorpb.FileDescriptorProto{fileDesc},
			SourceFileDescriptors: []*descriptorpb.FileDescriptorProto{fileDesc},
			CompilerVersion:       compilerVersion,
		}
		rsp := testGenerate(t, req)
		assert.Nil(t, rsp.Error)
		assert.Equal(t, 0, len(rsp.File))
	})
}

func TestGeneratedCodeStructure(t *testing.T) {
	t.Parallel()

	t.Run("two services with same method name", func(t *testing.T) {
		t.Parallel()

		fileDesc := &descriptorpb.FileDescriptorProto{
			Name:    ptr("multi_service.proto"),
			Package: ptr("test.v1"),
			MessageType: []*descriptorpb.DescriptorProto{
				{Name: ptr("UserRequest")},
				{Name: ptr("UserResponse")},
				{Name: ptr("ProductRequest")},
				{Name: ptr("ProductResponse")},
			},
			Service: []*descriptorpb.ServiceDescriptorProto{
				{
					Name: ptr("UserService"),
					Method: []*descriptorpb.MethodDescriptorProto{
						{
							Name:       ptr("Create"),
							InputType:  ptr(".test.v1.UserRequest"),
							OutputType: ptr(".test.v1.UserResponse"),
						},
					},
				},
				{
					Name: ptr("ProductService"),
					Method: []*descriptorpb.MethodDescriptorProto{
						{
							Name:       ptr("Create"),
							InputType:  ptr(".test.v1.ProductRequest"),
							OutputType: ptr(".test.v1.ProductResponse"),
						},
					},
				},
			},
			Options: &descriptorpb.FileOptions{
				GoPackage: ptr("example.com/test/gen"),
			},
		}

		compilerVersion := &pluginpb.Version{
			Major:  ptr(int32(0)),
			Minor:  ptr(int32(0)),
			Patch:  ptr(int32(1)),
			Suffix: ptr("test"),
		}

		req := &pluginpb.CodeGeneratorRequest{
			FileToGenerate:        []string{"multi_service.proto"},
			ProtoFile:             []*descriptorpb.FileDescriptorProto{fileDesc},
			SourceFileDescriptors: []*descriptorpb.FileDescriptorProto{fileDesc},
			CompilerVersion:       compilerVersion,
		}

		rsp := testGenerate(t, req)
		assert.Nil(t, rsp.Error)
		assert.Equal(t, 1, len(rsp.File))

		file := rsp.File[0]
		assert.Equal(t, "example.com/test/gen/genconnect/multi_service.servicestruct.connect.go", file.GetName())
		content := file.GetContent()

		assert.Equal(t, `// Code generated by protoc-gen-connect-go-servicestruct. DO NOT EDIT.
//
// Source: multi_service.proto

package genconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	gen "example.com/test/gen"
)

type UserServiceCreateHandlerFunc func(context.Context, *connect.Request[gen.UserRequest]) (*connect.Response[gen.UserResponse], error)

type ProductServiceCreateHandlerFunc func(context.Context, *connect.Request[gen.ProductRequest]) (*connect.Response[gen.ProductResponse], error)

type UserServiceStruct struct {
	CreateFunc UserServiceCreateHandlerFunc
}

func (s *UserServiceStruct) Create(ctx context.Context, req *connect.Request[gen.UserRequest]) (*connect.Response[gen.UserResponse], error) {
	return s.CreateFunc(ctx, req)
}

type ProductServiceStruct struct {
	CreateFunc ProductServiceCreateHandlerFunc
}

func (s *ProductServiceStruct) Create(ctx context.Context, req *connect.Request[gen.ProductRequest]) (*connect.Response[gen.ProductResponse], error) {
	return s.CreateFunc(ctx, req)
}
`, content)
	})
}

func TestBufGoPackagePrefixPathGeneration(t *testing.T) {
	t.Parallel()

	compilerVersion := &pluginpb.Version{
		Major:  ptr(int32(0)),
		Minor:  ptr(int32(0)),
		Patch:  ptr(int32(1)),
		Suffix: ptr("test"),
	}

	t.Run("with buf go_package_prefix causing path duplication", func(t *testing.T) {
		t.Parallel()

		fileDesc := &descriptorpb.FileDescriptorProto{
			Name:    ptr("acme/billing/v1/invoice.proto"),
			Package: ptr("acme.billing.v1"),
			MessageType: []*descriptorpb.DescriptorProto{
				{Name: ptr("CreateInvoiceRequest")},
				{Name: ptr("CreateInvoiceResponse")},
			},
			Service: []*descriptorpb.ServiceDescriptorProto{
				{
					Name: ptr("BillingService"),
					Method: []*descriptorpb.MethodDescriptorProto{
						{
							Name:       ptr("CreateInvoice"),
							InputType:  ptr(".acme.billing.v1.CreateInvoiceRequest"),
							OutputType: ptr(".acme.billing.v1.CreateInvoiceResponse"),
						},
					},
				},
			},
			Options: &descriptorpb.FileOptions{
				GoPackage: ptr("github.com/acme/service/internal/grpc/pb/acme/billing/v1"),
			},
		}

		req := &pluginpb.CodeGeneratorRequest{
			FileToGenerate:        []string{"acme/billing/v1/invoice.proto"},
			ProtoFile:             []*descriptorpb.FileDescriptorProto{fileDesc},
			SourceFileDescriptors: []*descriptorpb.FileDescriptorProto{fileDesc},
			CompilerVersion:       compilerVersion,
		}

		rsp := testGenerate(t, req)
		assert.Nil(t, rsp.Error)
		assert.Equal(t, 1, len(rsp.File))

		file := rsp.File[0]
		expectedPath := "github.com/acme/service/internal/grpc/pb/acme/billing/v1/v1connect/invoice.servicestruct.connect.go"
		assert.Equal(t, expectedPath, file.GetName())
		assert.NotContains(t, file.GetName(), "github.com/acme/service/internal/grpc/pb/github.com/acme/service/internal/grpc/pb")

		content := file.GetContent()
		assert.Contains(t, content, "package v1connect")
		assert.Contains(t, content, "v1 \"github.com/acme/service/internal/grpc/pb/acme/billing/v1\"")
	})
}

func testGenerate(t *testing.T, req *pluginpb.CodeGeneratorRequest) *pluginpb.CodeGeneratorResponse {
	t.Helper()

	inputBytes, err := proto.Marshal(req)
	require.NoError(t, err)

	stdout, stderr, exitCode := testRunProtocGenServiceStruct(t, bytes.NewReader(inputBytes))
	assert.Equal(t, 0, exitCode)
	assert.Equal(t, "", stderr.String())
	assert.Greater(t, len(stdout.Bytes()), 0)

	var output pluginpb.CodeGeneratorResponse
	assert.NoError(t, proto.Unmarshal(stdout.Bytes(), &output))
	return &output
}

func testRunProtocGenServiceStruct(t *testing.T, stdin io.Reader, args ...string) (stdout, stderr *bytes.Buffer, exitCode int) {
	t.Helper()

	stdout = &bytes.Buffer{}
	stderr = &bytes.Buffer{}
	args = append([]string{"run", "main.go"}, args...)

	cmd := exec.Command("go", args...)
	cmd.Env = os.Environ()
	cmd.Stdin = stdin
	cmd.Stdout = stdout
	cmd.Stderr = stderr
	require.NoError(t, cmd.Run(), "Run go %v", args)
	exitCode = cmd.ProcessState.ExitCode()
	return stdout, stderr, exitCode
}

func ptr[T any](v T) *T {
	return &v
}
